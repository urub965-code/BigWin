‎// file: composer.json
‎{
‎    "name": "laravel/laravel",
‎    "description": "The Laravel Framework.",
‎    "keywords": ["framework", "laravel"],
‎    "license": "MIT",
‎    "type": "project",
‎    "require": {
‎        "php": "^8.2",
‎        "laravel/framework": "^10.0",
‎        "laravel/sanctum": "^3.2",
‎        "laravel/tinker": "^2.8"
‎    },
‎    "require-dev": {
‎        "fakerphp/faker": "^1.21",
‎        "laravel/pint": "^1.0",
‎        "laravel/sail": "^1.18",
‎        "mockery/mockery": "^1.4.4",
‎        "nunomaduro/collision": "^7.0",
‎        "phpunit/phpunit": "^10.0"
‎    },
‎    "autoload": {
‎        "psr-4": {
‎            "App\\": "app/",
‎            "Database\\Factories\\": "database/factories/",
‎            "Database\\Seeders\\": "database/seeders/"
‎        }
‎    },
‎    "autoload-dev": {
‎        "psr-4": {
‎            "Tests\\": "tests/"
‎        }
‎    },
‎    "scripts": {
‎        "post-autoload-dump": [
‎            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
‎            "@php artisan package:discover --ansi"
‎        ],
‎        "post-update-cmd": [
‎            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
‎        ],
‎        "post-root-package-install": [
‎            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
‎        ],
‎        "post-create-project-cmd": [
‎            "@php artisan key:generate --ansi"
‎        ]
‎    },
‎    "extra": {
‎        "laravel": {
‎            "dont-discover": []
‎        }
‎    },
‎    "config": {
‎        "optimize-autoloader": true,
‎        "preferred-install": "dist",
‎        "sort-packages": true,
‎        "allow-plugins": {
‎            "pestphp/pest-plugin": true,
‎            "php-http/discovery": true
‎        }
‎    },
‎    "minimum-stability": "stable",
‎    "prefer-stable": true
‎}// file: .env.example
‎APP_NAME="BigWin"
‎APP_ENV=local
‎APP_KEY=
‎APP_DEBUG=true
‎APP_URL=http://localhost
‎APP_COUNTRY="Pakistan"
‎APP_CODE="+92"
‎APP_LOCALE=en
‎APP_FALLBACK_LOCALE=en
‎APP_DEMO_ONLY=true
‎
‎LOG_CHANNEL=stack
‎LOG_DEPRECATIONS_CHANNEL=null
‎LOG_LEVEL=debug
‎
‎DB_CONNECTION=mysql
‎DB_HOST=127.0.0.1
‎DB_PORT=3306
‎DB_DATABASE=bigwin_db
‎DB_USERNAME=root
‎DB_PASSWORD=
‎
‎BROADCAST_DRIVER=log
‎CACHE_DRIVER=file
‎FILESYSTEM_DISK=local
‎QUEUE_CONNECTION=sync
‎SESSION_DRIVER=file
‎SESSION_LIFETIME=120
‎
‎MAIL_MAILER=smtp
‎MAIL_HOST=mailhog
‎MAIL_PORT=1025
‎MAIL_USERNAME=null
‎MAIL_PASSWORD=null
‎MAIL_ENCRYPTION=null
‎MAIL_FROM_ADDRESS="hello@bigwin.com"
‎MAIL_FROM_NAME="${APP_NAME}"
‎
‎AWS_ACCESS_KEY_ID=
‎AWS_SECRET_ACCESS_KEY=
‎AWS_DEFAULT_REGION=us-east-1
‎AWS_BUCKET=
‎AWS_USE_PATH_STYLE_ENDPOINT=false
‎
‎PUSHER_APP_ID=
‎PUSHER_APP_KEY=
‎PUSHER_APP_SECRET=
‎PUSHER_APP_CLUSTER=mt1
‎
‎MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
‎MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"// file: routes/web.php
‎<?php
‎
‎use App\Http\Controllers\Auth\AuthenticatedSessionController;
‎use App\Http\Controllers\Auth\RegisteredUserController;
‎use App\Http\Controllers\LocaleController;
‎use Illuminate\Support\Facades\Route;
‎
‎/*
‎|--------------------------------------------------------------------------
‎| Web Routes
‎|--------------------------------------------------------------------------
‎|
‎| Here is where you can register web routes for your application. These
‎| routes are loaded by the RouteServiceProvider and all of them will
‎| be assigned to the "web" middleware group. Make something great!
‎|
‎*/
‎
‎Route::get('/', function () {
‎    return view('welcome');
‎});
‎
‎// Guest-only routes
‎Route::middleware('guest')->group(function () {
‎    Route::get('register', [RegisteredUserController::class, 'create'])->name('register');
‎    Route::post('register', [RegisteredUserController::class, 'store']);
‎
‎    Route::get('login', [AuthenticatedSessionController::class, 'create'])->name('login');
‎    Route::post('login', [AuthenticatedSessionController::class, 'store']);
‎});
‎
‎// Authenticated routes
‎Route::middleware('auth')->group(function () {
‎    Route::get('/dashboard', function () {
‎        return view('dashboard');
‎    })->name('dashboard');
‎
‎    Route::post('logout', [AuthenticatedSessionController::class, 'destroy'])->name('logout');
‎});
‎
‎// Language switch route
‎Route::get('lang/{locale}', [LocaleController::class, 'setLocale'])->name('locale.switch');
‎// file: routes/api.php
‎<?php
‎
‎use Illuminate\Http\Request;
‎use Illuminate\Support\Facades\Route;
‎
‎/*
‎|--------------------------------------------------------------------------
‎| API Routes
‎|--------------------------------------------------------------------------
‎|
‎| Here is where you can register API routes for your application. These
‎| routes are loaded by the RouteServiceProvider and all of them will
‎| be assigned to the "api" middleware group. Enjoy building your API!
‎|
‎*/
‎
‎Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
‎    return $request->user();
‎});
‎
‎// No API routes for auth logic are needed for this phase.
‎// file: app/Models/User.php
‎<?php
‎
‎namespace App\Models;
‎
‎use Illuminate\Contracts\Auth\MustVerifyEmail;
‎use Illuminate\Database\Eloquent\Factories\HasFactory;
‎use Illuminate\Foundation\Auth\User as Authenticatable;
‎use Illuminate\Notifications\Notifiable;
‎use Laravel\Sanctum\HasApiTokens;
‎
‎class User extends Authenticatable
‎{
‎    use HasApiTokens, HasFactory, Notifiable;
‎
‎    /**
‎     * The attributes that are mass assignable.
‎     *
‎     * @var array<int, string>
‎     */
‎    protected $fillable = [
‎        'name',
‎        'email',
‎        'phone_number',
‎        'password',
‎    ];
‎
‎    /**
‎     * The attributes that should be hidden for serialization.
‎     *
‎     * @var array<int, string>
‎     */
‎    protected $hidden = [
‎        'password',
‎        'remember_token',
‎    ];
‎
‎    /**
‎     * The attributes that should be cast.
‎     *
‎     * @var array<string, string>
‎     */
‎    protected $casts = [
‎        'email_verified_at' => 'datetime',
‎        'phone_verified_at' => 'datetime',
‎        'password' => 'hashed',
‎        'is_admin' => 'boolean',
‎    ];
‎
‎    /**
‎     * Get the user's role.
‎     *
‎     * @return string
‎     */
‎    public function getRoleAttribute(): string
‎    {
‎        return $this->is_admin ? 'Admin' : 'User';
‎    }
‎}// file: database/migrations/2024_01_01_000000_create_users_table.php
‎<?php
‎
‎use Illuminate\Database\Migrations\Migration;
‎use Illuminate\Database\Schema\Blueprint;
‎use Illuminate\Support\Facades\Schema;
‎
‎return new class extends Migration
‎{
‎    /**
‎     * Run the migrations.
‎     */
‎    public function up(): void
‎    {
‎        Schema::create('users', function (Blueprint $table) {
‎            $table->id();
‎            $table->string('name');
‎            $table->string('phone_number')->unique();
‎            $table->string('email')->nullable();
‎            $table->timestamp('phone_verified_at')->nullable();
‎            $table->timestamp('email_verified_at')->nullable();
‎            $table->string('password');
‎            $table->decimal('wallet_balance', 10, 2)->default(0.00);
‎            $table->boolean('is_admin')->default(false);
‎            $table->boolean('is_operator')->default(false); // To be used in Admin Panel phase
‎            $table->rememberToken();
‎            $table->timestamps();
‎        });
‎    }
‎
‎    /**
‎     * Reverse the migrations.
‎     */
‎    public function down(): void
‎    {
‎        Schema::dropIfExists('users');
‎    }
‎};// file: database/migrations/2024_01_01_000001_create_password_reset_tokens_table.php
‎<?php
‎
‎use Illuminate\Database\Migrations\Migration;
‎use Illuminate\Database\Schema\Blueprint;
‎use Illuminate\Support\Facades\Schema;
‎
‎return new class extends Migration
‎{
‎    /**
‎     * Run the migrations.
‎     */
‎    public function up(): void
‎    {
‎        Schema::create('password_reset_tokens', function (Blueprint $table) {
‎            $table->string('email')->primary();
‎            $table->string('token');
‎            $table->timestamp('created_at')->nullable();
‎        });
‎    }
‎
‎    /**
‎     * Reverse the migrations.
‎     */
‎    public function down(): void
‎    {
‎        Schema::dropIfExists('password_reset_tokens');
‎    }
‎};// file: app/Http/Requests/Auth/RegisterRequest.php
‎<?php
‎
‎namespace App\Http\Requests\Auth;
‎
‎use App\Models\User;
‎use Illuminate\Validation\Rules\Password;
‎use Illuminate\Foundation\Http\FormRequest;
‎
‎class RegisterRequest extends FormRequest
‎{
‎    /**
‎     * Determine if the user is authorized to make this request.
‎     */
‎    public function authorize(): bool
‎    {
‎        return true;
‎    }
‎
‎    /**
‎     * Get the validation rules that apply to the request.
‎     *
‎     * @return array<string, \Illuminate\Contracts\Validation\Rule|array|string>
‎     */
‎    public function rules(): array
‎    {
‎        return [
‎            'name' => ['required', 'string', 'max:255'],
‎            'phone_number' => [
‎                'required',
‎                'string',
‎                'regex:/^\\+92\\d{10}$/',
‎                'unique:'.User::class,
‎            ],
‎            'email' => ['nullable', 'string', 'email', 'max:255', 'unique:'.User::class],
‎            'password' => ['required', 'confirmed', Password::defaults()],
‎        ];
‎    }
‎    
‎    /**
‎     * Get the custom validation messages.
‎     *
‎     * @return array
‎     */
‎    public function messages(): array
‎    {
‎        return [
‎            'phone_number.regex' => 'The phone number format is invalid. It must be in the format +92XXXXXXXXXX.',
‎        ];
‎    }
‎}
‎// file: app/Http/Requests/Auth/LoginRequest.php
‎<?php
‎
‎namespace App\Http\Requests\Auth;
‎
‎use Illuminate\Support\Facades\Auth;
‎use Illuminate\Foundation\Http\FormRequest;
‎use Illuminate\Validation\ValidationException;
‎use Illuminate\Support\Facades\RateLimiter;
‎use Illuminate\Support\Str;
‎
‎class LoginRequest extends FormRequest
‎{
‎    /**
‎     * Determine if the user is authorized to make this request.
‎     */
‎    public function authorize(): bool
‎    {
‎        return true;
‎    }
‎
‎    /**
‎     * Get the validation rules that apply to the request.
‎     *
‎     * @return array<string, \Illuminate\Contracts\Validation\Rule|array|string>
‎     */
‎    public function rules(): array
‎    {
‎        return [
‎            'login_id' => ['required', 'string'],
‎            'password' => ['required', 'string'],
‎        ];
‎    }
‎
‎    /**
‎     * Attempt to authenticate the request's credentials.
‎     *
‎     * @throws \Illuminate\Validation\ValidationException
‎     */
‎    public function authenticate(): void
‎    {
‎        $this->ensureIsNotRateLimited();
‎
‎        $loginId = $this->input('login_id');
‎
‎        // Determine if login ID is an email or phone number
‎        $fieldType = filter_var($loginId, FILTER_VALIDATE_EMAIL) ? 'email' : 'phone_number';
‎
‎        if (! Auth::attempt([$fieldType => $loginId, 'password' => $this->input('password')], $this->boolean('remember'))) {
‎            RateLimiter::hit($this->throttleKey());
‎
‎            throw ValidationException::withMessages([
‎                'login_id' => __('auth.failed'),
‎            ]);
‎        }
‎
‎        RateLimiter::clear($this->throttleKey());
‎    }
‎
‎    /**
‎     * Ensure the login request is not rate limited.
‎     *
‎     * @throws \Illuminate\Validation\ValidationException
‎     */
‎    public function ensureIsNotRateLimited(): void
‎    {
‎        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
‎            return;
‎        }
‎
‎        $seconds = RateLimiter::availableIn($this->throttleKey());
‎
‎        throw ValidationException::withMessages([
‎            'login_id' => trans('auth.throttle', [
‎                'seconds' => $seconds,
‎                'minutes' => ceil($seconds / 60),
‎            ]),
‎        ]);
‎    }
‎
‎    /**
‎     * Get the rate limiting throttle key for the request.
‎     */
‎    public function throttleKey(): string
‎    {
‎        return Str::transliterate(Str::lower($this->input('login_id')).'|'.$this->ip());
‎    }
‎}
‎// file: app/Http/Controllers/Auth/RegisteredUserController.php
‎<?php
‎
‎namespace App\Http\Controllers\Auth;
‎
‎use App\Http\Controllers\Controller;
‎use App\Models\User;
‎use App\Providers\RouteServiceProvider;
‎use Illuminate\Http\RedirectResponse;
‎use Illuminate\Http\Request;
‎use Illuminate\Support\Facades\Auth;
‎use Illuminate\Support\Facades\Hash;
‎use Illuminate\Validation\Rules;
‎use Illuminate\View\View;
‎use App\Http\Requests\Auth\RegisterRequest;
‎
‎class RegisteredUserController extends Controller
‎{
‎    /**
‎     * Display the registration view.
‎     */
‎    public function create(): View
‎    {
‎        return view('auth.register');
‎    }
‎
‎    /**
‎     * Handle an incoming registration request.
‎     *
‎     * @throws \Illuminate\Validation\ValidationException
‎     */
‎    public function store(RegisterRequest $request): RedirectResponse
‎    {
‎        // Validation is handled by the RegisterRequest FormRequest.
‎        // The password has already been hashed by the User model's casts property.
‎        $user = User::create([
‎            'name' => $request->name,
‎            'phone_number' => $request->phone_number,
‎            'email' => $request->email,
‎            'password' => $request->password,
‎        ]);
‎
‎        // Log the new user in
‎        Auth::login($user);
‎
‎        // Redirect to the dashboard
‎        return redirect()->route('dashboard');
‎    }
‎}
‎```php
‎// file: app/Http/Controllers/Auth/AuthenticatedSessionController.php
‎<?php
‎
‎namespace App\Http\Controllers\Auth;
‎
‎use App\Http\Controllers\Controller;
‎use App\Http\Requests\Auth\LoginRequest;
‎use Illuminate\Http\RedirectResponse;
‎use Illuminate\Http\Request;
‎use Illuminate\Support\Facades\Auth;
‎use Illuminate\View\View;
‎
‎class AuthenticatedSessionController extends Controller
‎{
‎    /**
‎     * Display the login view.
‎     */
‎    public function create(): View
‎    {
‎        return view('auth.login');
‎    }
‎
‎    /**
‎     * Handle an incoming authentication request.
‎     */
‎    public function store(LoginRequest $request): RedirectResponse
‎    {
‎        $request->authenticate();
‎        $request->session()->regenerate();
‎
‎        return redirect()->intended(route('dashboard'));
‎    }
‎
‎    /**
‎     * Destroy an authenticated session.
‎     */
‎    public function destroy(Request $request): RedirectResponse
‎    {
‎        Auth::guard('web')->logout();
‎
‎        $request->session()->invalidate();
‎        $request->session()->regenerateToken();
‎
‎        return redirect('/');
‎    }
‎}
‎```php
‎// file: app/Http/Controllers/Auth/EmailVerificationNotificationController.php
‎<?php
‎
‎namespace App\Http\Controllers\Auth;
‎
‎use App\Http\Controllers\Controller;
‎use App\Models\User;
‎use Illuminate\Http\RedirectResponse;
‎use Illuminate\Http\Request;
‎use Illuminate\View\View;
‎
‎class EmailVerificationNotificationController extends Controller
‎{
‎    /**
‎     * Send a new email verification notification.
‎     * This is a stub for future implementation.
‎     */
‎    public function store(Request $request): RedirectResponse
‎    {
‎        // Stub for future email verification logic
‎        // If your users require email verification, you'll add the logic here.
‎        // For now, this is not a required feature and is commented out.
‎        // if ($request->user()->hasVerifiedEmail()) {
‎        //     return redirect()->intended(route('dashboard'));
‎        // }
‎
‎        // $request->user()->sendEmailVerificationNotification();
‎
‎        return back()->with('status', 'verification-link-sent');
‎    }
‎}
‎```php
‎// file: app/Http/Controllers/LocaleController.php
‎<?php
‎
‎namespace App\Http\Controllers;
‎
‎use Illuminate\Http\RedirectResponse;
‎use Illuminate\Http\Request;
‎
‎class LocaleController extends Controller
‎{
‎    /**
‎     * Set the application locale.
‎     */
‎    public function setLocale(Request $request, string $locale): RedirectResponse
‎    {
‎        if (in_array($locale, ['en', 'ur'])) {
‎            $request->session()->put('locale', $locale);
‎        }
‎
‎        return redirect()->back();
‎    }
‎}
‎```php
‎// file: app/Http/Middleware/EnsurePhoneVerified.php
‎<?php
‎
‎namespace App\Http\Middleware;
‎
‎use Closure;
‎use Illuminate\Http\Request;
‎use Symfony\Component\HttpFoundation\Response;
‎
‎class EnsurePhoneVerified
‎{
‎    /**
‎     * Handle an incoming request.
‎     *
‎     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
‎     */
‎    public function handle(Request $request, Closure $next): Response
‎    {
‎        // This is a stub middleware for future phone verification implementation.
‎        // For now, it simply passes the request through.
‎        //
‎        // You would add logic here to check if the user's phone is verified.
‎        // if (! $request->user() || ! $request->user()->phone_verified_at) {
‎        //     return redirect()->route('phone.verification.notice');
‎        // }
‎
‎        return $next($request);
‎    }
‎}
‎```php
‎// file: app/Http/Kernel.php
‎<?php
‎
‎namespace App\Http;
‎
‎use Illuminate\Foundation\Http\Kernel as HttpKernel;
‎
‎class Kernel extends HttpKernel
‎{
‎    /**
‎     * The application's global HTTP middleware stack.
‎     *
‎     * These middleware are run for every request to your application.
‎     *
‎     * @var array<int, string>
‎     */
‎    protected $middleware = [
‎        // \App\Http\Middleware\TrustProxies::class,
‎        \Illuminate\Http\Middleware\PreventRequestsDuringMaintenance::class,
‎        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
‎        \App\Http\Middleware\TrimStrings::class,
‎        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
‎        // \App\Http\Middleware\SetLocale::class, // Custom middleware to set locale based on session
‎    ];
‎
‎    /**
‎     * The application's route middleware groups.
‎     *
‎     * @var array<string, array<int, string>>
‎     */
‎    protected $middlewareGroups = [
‎        'web' => [
‎            \App\Http\Middleware\EncryptCookies::class,
‎            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
‎            \Illuminate\Session\Middleware\StartSession::class,
‎            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
‎            \App\Http\Middleware\VerifyCsrfToken::class,
‎            \Illuminate\Routing\Middleware\SubstituteBindings::class,
‎            \App\Http\Middleware\SetLocale::class,
‎        ],
‎
‎        'api' => [
‎            // \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
‎            'throttle:api',
‎            \Illuminate\Routing\Middleware\SubstituteBindings::class,
‎        ],
‎    ];
‎
‎    /**
‎     * The application's route middleware aliases.
‎     *
‎     * These middleware may be assigned to groups or used individually.
‎     *
‎     * @var array<string, string>
‎     */
‎    protected $middlewareAliases = [
‎        'auth' => \Illuminate\Auth\Middleware\Authenticate::class,
‎        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
‎        'bindings' => \Illuminate\Routing\Middleware\SubstituteBindings::class,
‎        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
‎        'can' => \Illuminate\Auth\Middleware\Authorize::class,
‎        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
‎        'signed' => \Illuminate\Routing\Middleware\ValidateSignature::class,
‎        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
‎        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
‎        'phone.verified' => \App\Http\Middleware\EnsurePhoneVerified::class,
‎    ];
‎'api' => [
‎            // \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
‎            'throttle:api',
‎            \Illuminate\Routing\Middleware\SubstituteBindings::class,
‎        ],
‎    ];
‎
‎    /**
‎     * The application's route middleware aliases.
‎     *
‎     * These middleware may be assigned to groups or used individually.
‎     *
‎     * @var array<string, string>
‎     */
‎    protected $middlewareAliases = [
‎        'auth' => \Illuminate\Auth\Middleware\Authenticate::class,
‎        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
‎        'bindings' => \Illuminate\Routing\Middleware\SubstituteBindings::class,
‎        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
‎        'can' => \Illuminate\Auth\Middleware\Authorize::class,
‎        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
‎        'signed' => \Illuminate\Routing\Middleware\ValidateSignature::class,
‎        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
‎        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
‎        'phone.verified' => \App\Http\Middleware\EnsurePhoneVerified::class,
‎    ];
‎}
‎'api' => [
‎            // \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
‎            'throttle:api',
\Illuminate\Routing\Middleware\SubstituteBindings::class,
‎        ],
‎    ];
‎
‎    /**
‎     * The application's route middleware aliases.
*
‎     * These middleware may be assigned to groups or used individually.
‎     *
‎     * @var array<string, string>
‎     */
‎    protected $middlewareAliases = [
‎        'auth' => \Illuminate\Auth\Middleware\Authenticate::class,
‎        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
'bindings' => \Illuminate\Routing\Middleware\SubstituteBindings::class,
‎        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
‎        'can' => \Illuminate\Auth\Middleware\Authorize::class,
‎        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
‎        'signed' => \Illuminate\Routing\Middleware\ValidateSignature::class,
‎        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
‎        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
‎        'phone.verified' => \App\Http\Middleware\EnsurePhoneVerified::class,
‎    ];
‎}
‎```php
‎// file: app/Support/Phone.php
‎<?php
‎
‎namespace App\Support;
‎
‎class Phone
‎{
‎    /**
‎     * Normalize a Pakistani phone number to a standard format (+92xxxxxxxxxx).
‎     */
‎    public static function normalize(string $number): string
‎    {
‎        // Remove all non-numeric characters and spaces
‎        $normalized = preg_replace('/[^0-9]/', '', $number);
‎
‎        // If it starts with 03..., replace with +923
‎        if (Str::startsWith($normalized, '03')) {
‎            $normalized = '+92' . Str::substr($normalized, 1);
‎        }
‎        // If it starts with 923..., add the +
‎        elseif (Str::startsWith($normalized, '923')) {
‎            $normalized = '+' . $normalized;
‎        }

return $normalized;
‎    }
‎}
‎// file: database/seeders/AdminUserSeeder.php
‎<?php
‎
‎namespace Database\Seeders;
‎
‎use App\Models\User;
‎use Illuminate\Database\Seeder;
‎use Illuminate\Support\Facades\Hash;
‎use Illuminate\Support\Str;
‎
‎class AdminUserSeeder extends Seeder
‎{
‎    /**
‎     * Run the database seeds.
‎     *
‎     * @return void
‎     */
‎    public function run()
‎    {
‎        $password = Str::random(12);
‎
‎        User::firstOrCreate(
‎            ['phone_number' => '+923001234567'],
‎            [
‎                'name' => 'Admin BigWin',
‎                'email' => 'admin@bigwin.com',
‎                'password' => Hash::make($password),
‎                'is_admin' => true,
‎                'is_operator' => true,
‎                'email_verified_at' => now(),
‎                'phone_verified_at' => now(),
‎            ]
‎        );
‎
‎        $this->command->info('Admin user created successfully!');
‎        $this->command->warn("Use the following credentials to log in:");
‎        $this->command->line("Phone: +923001234567");
‎        $this->command->line("Password: {$password}");
‎        $this->command->warn("Please change this password immediately after first login.");
‎    }
‎}
‎```php
‎// file: resources/lang/en/auth.php
‎<?php
‎
‎return [
‎    'failed' => 'These credentials do not match our records.',
‎    'password' => 'The provided password is incorrect.',
‎    'throttle' => 'Too many login attempts. Please try again in :seconds seconds.',
‎    'register' => 'Register',
‎    'login' => 'Login',
‎    'logout' => 'Logout',
‎    'name' => 'Name',
‎    'phone_number' => 'Phone Number',
‎    'email' => 'Email Address (Optional)',
‎    'password' => 'Password',
‎    'confirm_password' => 'Confirm Password',
‎    'remember_me' => 'Remember me',
‎    'already_registered' => 'Already registered?',
‎    'dont_have_account' => 'Don\'t have an account?',
‎    'welcome' => 'Welcome to BigWin!',
‎];
‎```php
‎// file: resources/lang/ur/auth.php
‎<?php
‎
‎return [
‎    'failed' => 'یہ اسناد ہمارے ریکارڈ سے مماثل نہیں ہیں۔',
‎    'password' => 'فراہم کردہ پاس ورڈ غلط ہے۔',
‎    'throttle' => 'بہت زیادہ لاگ ان کی کوششیں ہیں۔ براہ کرم :seconds سیکنڈز میں دوبارہ کوشش کریں۔',
‎    'register' => 'رجسٹر کریں',
‎    'login' => 'لاگ ان کریں',
‎    'logout' => 'لاگ آؤٹ',
‎    'name' => 'نام',
‎    'phone_number' => 'فون نمبر',
‎    'email' => 'ای میل ایڈریس (اختیاری)',
‎    'password' => 'پاس ورڈ',
‎    'confirm_password' => 'پاس ورڈ کی تصدیق کریں',
‎    'remember_me' => 'مجھے یاد رکھیں',
‎    'already_registered' => 'پہلے سے رجسٹرڈ ہیں؟',
‎    'dont_have_account' => 'اکاؤنٹ نہیں ہے؟',
‎    'welcome' => 'بگ ون میں خوش آمدید!',
‎];
‎```php
‎// file: resources/lang/en/validation.php
‎<?php
‎
‎return [
‎    'regex' => 'The :attribute format is invalid.',
‎    'unique' => 'The :attribute has already been taken.',
‎    'required' => 'The :attribute field is required.',
‎    'email' => 'The :attribute must be a valid email address.',
‎    'confirmed' => 'The :attribute confirmation does not match.',
‎    'min' => [
‎        'string' => 'The :attribute must be at least :min characters.',
‎    ],
‎    'attributes' => [
‎        'phone_number' => 'phone number',
‎    ],
‎];
‎```php
‎// file: resources/lang/ur/validation.php
‎<?php
‎
‎return [
‎    'regex' => 'فارمیٹ غلط ہے۔ :attribute',
‎    'unique' => ':attribute پہلے ہی لیا جا چکا ہے۔',
‎    'required' => ':attribute کا خانہ ضروری ہے۔',
‎    'email' => ':attribute درست ای میل ایڈریس ہونا چاہیے۔',
‎    'confirmed' => ':attribute کی تصدیق مماثل نہیں ہے۔',
‎    'min' => [
‎        'string' => ':attribute کم از کم :min حروف کا ہونا چاہیے۔',
‎    ],
‎    'attributes' => [
‎        'phone_number' => 'فون نمبر',
‎    ],
‎];
‎```html
‎<!-- file: resources/views/layouts/app.blade.php -->
‎<!DOCTYPE html>
‎<html lang="{{ app()->getLocale() }}">
‎<head>
‎    <meta charset="utf-8">
‎    <meta name="viewport" content="width=device-width, initial-scale=1">
‎    <title>{{ config('app.name', 'BigWin') }}</title>
‎    <link href="[https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css](https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css)" rel="stylesheet">
‎    <style>
‎        body {
‎            background-color: #f8f9fa;
‎        }
‎        .container {
‎            max-width: 500px;
‎        }
‎    </style>
‎</head>
‎<body>
‎    <nav class="navbar navbar-expand-lg navbar-light bg-light">
‎        <div class="container-fluid">
‎            <a class="navbar-brand" href="{{ url('/') }}">{{ config('app.name', 'BigWin') }}</a>
‎            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
‎                <span class="navbar-toggler-icon"></span>
‎            </button>
‎            <div class="collapse navbar-collapse" id="navbarNav">
‎                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
‎                    @auth
‎                        <li class="nav-item">
‎                            <a class="nav-link" href="{{ route('dashboard') }}">Dashboard</a>
‎                        </li>
‎                    @else
‎                        <li class="nav-item">
‎                            <a class="nav-link" href="{{ route('login') }}">@lang('auth.login')</a>
‎                        </li>
‎                        <li class="nav-item">
‎                            <a class="nav-link" href="{{ route('register') }}">@lang('auth.register')</a>
‎                        </li>
‎                    @endauth
‎                </ul>
‎                <div class="d-flex">
‎                    <a class="btn btn-sm btn-outline-primary me-2" href="{{ route('locale.switch', 'en') }}">EN</a>
‎                    <a class="btn btn-sm btn-outline-primary" href="{{ route('locale.switch', 'ur') }}">UR</a>
‎                    @auth
‎                        <form method="POST" action="{{ route('logout') }}" class="ms-3">
‎                            @csrf
‎                            <button type="submit" class="btn btn-sm btn-danger">@lang('auth.logout')</button>
‎                        </form>
‎                    @endauth
‎                </div>
‎            </div>
‎        </div>
‎    </nav>
‎
‎    <main class="py-4">
‎        <div class="container">
‎            @if(session('status'))
‎                <div class="alert alert-success" role="alert">
‎                    {{ session('status') }}
‎                </div>
‎            @endif
‎            @yield('content')
‎        </div>
‎    </main>
‎    <script src="[https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js](https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js)"></script>
‎</body>
‎</html>
‎```html
‎<!-- file: resources/views/auth/register.blade.php -->
‎@extends('layouts.app')
‎
‎@section('content')
‎<div class="card p-4">
‎    <h2 class="text-center mb-4">@lang('auth.register')</h2>
‎    <form method="POST" action="{{ route('register') }}">
‎        @csrf
‎
‎        <div class="mb-3">
‎            <label for="name" class="form-label">@lang('auth.name')</label>
‎            <input type="text" class="form-control" id="name" name="name" value="{{ old('name') }}" required autofocus>
‎            @error('name')
‎                <div class="text-danger mt-1">{{ $message }}</div>
‎            @enderror
‎        </div>
‎
‎        <div class="mb-3">
‎            <label for="phone_number" class="form-label">@lang('auth.phone_number')</label>
‎            <input type="tel" class="form-control" id="phone_number" name="phone_number" value="{{ old('phone_number') }}" placeholder="+92XXXXXXXXXX" required>
‎            @error('phone_number')
‎                <div class="text-danger mt-1">{{ $message }}</div>
‎            @enderror
‎        </div>
‎
‎        <div class="mb-3">
‎            <label for="email" class="form-label">@lang('auth.email')</label>
‎            <input type="email" class="form-control" id="email" name="email" value="{{ old('email') }}">
‎            @error('email')
‎                <div class="text-danger mt-1">{{ $message }}</div>
‎            @enderror
‎        </div>
‎
‎        <div class="mb-3">
‎            <label for="password" class="form-label">@lang('auth.password')</label>
‎            <input type="password" class="form-control" id="password" name="password" required autocomplete="new-password">
‎            @error('password')
‎                <div class="text-danger mt-1">{{ $message }}</div>
‎            @enderror
‎        </div>
‎
‎        <div class="mb-3">
‎            <label for="password_confirmation" class="form-label">@lang('auth.confirm_password')</label>
‎            <input type="password" class="form-control" id="password_confirmation" name="password_confirmation" required>
‎        </div>
‎
‎        <div class="d-grid gap-2">
‎            <button type="submit" class="btn btn-primary">
‎                @lang('auth.register')
‎            </button>
‎        </div>
‎
‎        <div class="text-center mt-3">
‎            <a href="{{ route('login') }}">@lang('auth.already_registered')</a>
‎        </div>
‎    </form>
‎</div>
‎@endsection
‎```html
‎<!-- file: resources/views/auth/login.blade.php -->
‎@extends('layouts.app')
‎
‎@section('content')
‎<div class="card p-4">
‎    <h2 class="text-center mb-4">@lang('auth.login')</h2>
‎    <form method="POST" action="{{ route('login') }}">
‎        @csrf
‎
‎        <div class="mb-3">
‎            <label for="login_id" class="form-label">@lang('auth.phone_number') / Email</label>
‎            <input type="text" class="form-control" id="login_id" name="login_id" value="{{ old('login_id') }}" required autofocus>
‎            @error('login_id')
‎                <div class="text-danger mt-1">{{ $message }}</div>
‎            @enderror
‎        </div>
‎
‎        <div class="mb-3">
‎            <label for="password" class="form-label">@lang('auth.password')</label>
‎            <input type="password" class="form-control" id="password" name="password" required autocomplete="current-password">
‎            @error('password')
‎                <div class="text-danger mt-1">{{ $message }}</div>
‎            @enderror
‎        </div>
‎
‎        <div class="mb-3 form-check">
‎            <input type="checkbox" class="form-check-input" id="remember" name="remember">
‎            <label class="form-check-label" for="remember">@lang('auth.remember_me')</label>
‎        </div>
‎
‎        <div class="d-grid gap-2">
‎            <button type="submit" class="btn btn-primary">
‎                @lang('auth.login')
‎            </button>
‎        </div>
‎        
‎        <div class="text-center mt-3">
‎            <a href="{{ route('register') }}">@lang('auth.dont_have_account')</a>
‎        </div>
‎    </form>
‎</div>
‎@endsection
‎```html
‎<!-- file: resources/views/dashboard.blade.php -->
‎@extends('layouts.app')
‎
‎@section('content')
‎<div class="card p-4">
‎    <h2 class="text-center mb-4">@lang('auth.welcome')</h2>
‎    <p class="text-center">
‎        Hello, <strong>{{ Auth::user()->name }}</strong>!
‎    </p>
‎    <div class="alert alert-info text-center" role="alert">
‎        This is a placeholder for your dashboard.
‎        <br>
‎        In the next phases, this will include your wallet balance, recent plays, and more.
‎    </div>
‎</div>
‎@endsection
‎```xml
‎<!-- file: phpunit.xml -->
‎<?xml version="1.0" encoding="UTF-8"?>
‎<phpunit xmlns:xsi="[http://www.w3.org/2001/XMLSchema-instance](http://www.w3.org/2001/XMLSchema-instance)"
‎         xsi:noNamespaceSchemaLocation="[https://schema.phpunit.de/10.0/phpunit.xsd](https://schema.phpunit.de/10.0/phpunit.xsd)"
‎         bootstrap="vendor/autoload.php"
‎         colors="true"
‎         cacheDirectory=".phpunit.cache">
‎    <testsuites>
‎        <testsuite name="Feature">
‎            <directory>./tests/Feature</directory>
‎        </testsuite>
‎        <testsuite name="Unit">
‎            <directory>./tests/Unit</directory>
‎        </testsuite>
‎    </testsuites>
‎    <php>
‎        <env name="APP_ENV" value="testing"/>
‎        <env name="DB_CONNECTION" value="sqlite"/>
‎        <env name="DB_DATABASE" value=":memory:"/>
‎        <env name="BCRYPT_ROUNDS" value="4"/>
‎        <env name="MAIL_MAILER" value="array"/>
‎        <env name="QUEUE_CONNECTION" value="sync"/>
‎        <env name="SESSION_DRIVER" value="array"/>
‎        <env name="APP_KEY" value="base64:3h1L2W5jM4o7fE9xR0iN8yN6qT3bV2oJ4eP7wS1cQ0k="/>
‎    </php>
‎</phpunit>
‎```php
‎// file: tests/Feature/Auth/RegisterTest.php
‎<?php
‎
‎namespace Tests\Feature\Auth;
‎
‎use Illuminate\Foundation\Testing\RefreshDatabase;
‎use Illuminate\Support\Facades\Hash;
‎use Tests\TestCase;
‎use App\Models\User;
‎
‎class RegisterTest extends TestCase
‎{
‎    use RefreshDatabase;
‎
‎    /**
‎     * Test that the registration page can be rendered.
‎     */
‎    public function test_registration_page_can_be_rendered(): void
‎    {
‎        $response = $this->get('/register');
‎        $response->assertStatus(200);
‎    }
‎
‎    /**
‎     * Test that a new user can register with a valid phone number.
‎     */
‎    public function test_new_user_can_register_with_valid_phone_number(): void
‎    {
‎        $response = $this->post('/register', [
‎            'name' => 'Test User',
‎            'phone_number' => '+923001234567',
‎            'email' => 'testuser@example.com',
‎            'password' => 'password',
‎            'password_confirmation' => 'password',
‎        ]);
‎
‎        $this->assertAuthenticated();
‎        $response->assertRedirect(route('dashboard'));
‎        $this->assertDatabaseHas('users', ['phone_number' => '+923001234567']);
‎    }
‎
‎    /**
‎     * Test that a user cannot register with an invalid phone number format.
‎     */
‎    public function test_user_cannot_register_with_invalid_phone_number_format(): void
‎    {
‎        $response = $this->post('/register', [
‎            'name' => 'Test User',
‎            'phone_number' => '03001234567', // Invalid format without +92
‎            'email' => 'invalidphone@example.com',
‎            'password' => 'password',
‎            'password_confirmation' => 'password',
‎        ]);
‎
‎        $this->assertGuest();
‎        $response->assertSessionHasErrors('phone_number');
‎    }
‎
‎    /**
‎     * Test that a user cannot register with a duplicate phone number.
‎     */
‎    public function test_user_cannot_register_with_duplicate_phone_number(): void
‎    {
‎        User::factory()->create(['phone_number' => '+923001234567']);
‎
‎        $response = $this->post('/register', [
‎            'name' => 'Duplicate User',
‎            'phone_number' => '+923001234567',
‎            'email' => 'duplicate@example.com',
‎            'password' => 'password',
‎            'password_confirmation' => 'password',
‎        ]);
‎
‎        $this->assertGuest();
‎        $response->assertSessionHasErrors('phone_number');
‎    }
‎}
‎```php
‎// file: tests/Feature/Auth/LoginTest.php
‎<?php
‎
‎namespace Tests\Feature\Auth;
‎
‎use Illuminate\Foundation\Testing\RefreshDatabase;
‎use Illuminate\Support\Facades\Auth;
‎use Tests\TestCase;
‎use App\Models\User;
‎
‎class LoginTest extends TestCase
‎{
‎    use RefreshDatabase;
‎
‎    /**
‎     * Test that the login page can be rendered.
‎     */
‎    public function test_login_page_can_be_rendered(): void
‎    {
‎        $response = $this->get('/login');
‎        $response->assertStatus(200);
‎    }
‎
‎    /**
‎     * Test that a user can login with a phone number and a valid password.
‎     */
‎    public function test_user_can_authenticate_with_phone_number(): void
‎    {
‎        $user = User::factory()->create(['phone_number' => '+923001234567', 'password' => bcrypt('password')]);
‎
‎        $response = $this->post('/login', [
‎            'login_id' => '+923001234567',
‎            'password' => 'password',
‎        ]);
‎
‎        $this->assertAuthenticatedAs($user);
‎        $response->assertRedirect(route('dashboard'));
‎    }
‎
‎    /**
‎     * Test that a user can login with an email and a valid password.
‎     */
‎    public function test_user_can_authenticate_with_email(): void
‎    {
‎        $user = User::factory()->create(['email' => 'test@example.com', 'password' => bcrypt('password')]);
‎
‎        $response = $this->post('/login', [
‎            'login_id' => 'test@example.com',
‎            'password' => 'password',
‎        ]);
‎
‎        $this->assertAuthenticatedAs($user);
‎        $response->assertRedirect(route('dashboard'));
‎    }
‎
‎    /**
‎     * Test that a user cannot log in with invalid credentials.
‎     */
‎    public function test_user_cannot_authenticate_with_invalid_password(): void
‎    {
‎        $user = User::factory()->create(['phone_number' => '+923001234567', 'password' => bcrypt('password')]);
‎
‎        $this->post('/login', [
‎            'login_id' => '+923001234567',
‎            'password' => 'wrong-password',
‎        ]);
‎
‎        $this->assertGuest();
‎    }
‎}
‎```php
‎// file: tests/Feature/Auth/LocaleSwitchTest.php
‎<?php
‎
‎namespace Tests\Feature\Auth;
‎
‎use Illuminate\Foundation\Testing\RefreshDatabase;
‎use Tests\TestCase;
‎
‎class LocaleSwitchTest extends TestCase
‎{
‎    use RefreshDatabase;
‎
‎    /**
‎     * Test that the locale can be switched to Urdu.
‎     */
‎    public function test_locale_can_be_switched_to_urdu(): void
‎    {
‎        $response = $this->get(route('locale.switch', 'ur'));
‎        $response->assertSessionHas('locale', 'ur');
‎        $response->assertRedirect();
‎    }
‎
‎    /**
‎     * Test that the locale can be switched to English.
‎     */
‎    public function test_locale_can_be_switched_to_english(): void
‎    {
‎        $response = $this->get(route('locale.switch', 'en'));
‎        $response->assertSessionHas('locale', 'en');
‎        $response->assertRedirect();
‎    }
‎
‎    /**
‎     * Test that an invalid locale is not set.
‎     */
‎    public function test_invalid_locale_is_not_set(): void
‎    {
‎        $response = $this->get(route('locale.switch', 'fr'));
‎        $response->assertSessionMissing('locale');
‎        $response->assertRedirect();
‎    }
‎}
‎<!-- file: README.md -->
‎# BigWin: Lottery & Gaming Platform
‎
‎**Project Description:**
‎
‎BigWin is a modern, mobile-first, and secure online lottery and gaming platform built on Laravel 10. This platform is designed for Pakistani users, with full support for Urdu and English languages. It features a robust authentication system, a modular game architecture, a points-based wallet system, and a powerful admin panel.
‎
‎This repository currently contains the **Authentication Module** as Phase 1 of the project.
‎
‎## 🚀 cPanel Deployment Guide
‎
‎This guide covers the full deployment of the BigWin platform on a standard cPanel shared hosting environment.
‎
‎#### **1. Upload & Unzip Files**
‎
‎1.  **Package your code:** On your local machine, create a zip archive of all the project files and folders, ensuring the `vendor` and `node_modules` directories are excluded to save space.
‎2.  **Upload to cPanel:** Log in to your cPanel's **File Manager** and upload the zip file to your preferred directory (e.g., `public_html` for a main domain or a subdomain's root).
‎3.  **Extract:** Right-click the uploaded `.zip` file and choose **Extract**.
‎
‎#### **2. Database Setup**
‎
‎1.  **Create Database:** In cPanel, navigate to the **MySQL® Databases** tool. Create a new database and a new database user.
‎2.  **Assign User:** Add the user to the database you just created and ensure you grant them **all privileges**.
‎3.  **Update `.env`:** Copy the provided `.env.example` to a new file named `.env`. Open this file and update the database credentials to match what you created in cPanel.
‎
‎    ```ini
‎    DB_DATABASE=your_db_name
‎    DB_USERNAME=your_db_user
‎    DB_PASSWORD=your_db_password
‎    ```
‎
‎#### **3. Run Laravel Commands**
‎
‎Access your cPanel's **Terminal** to run the following commands. If you don't have terminal access, you may need to use a temporary PHP script to execute them.
‎
‎1.  **Generate App Key:**
‎    ```bash
‎    php artisan key:generate
‎    ```
‎
‎2.  **Run Migrations & Seeders:**
‎    ```bash
‎    php artisan migrate --force && php artisan db:seed --class=AdminUserSeeder --force
‎    ```
‎    > **Note:** The command output will display the password for the default admin user. Save these credentials and log in to change the password immediately.

3.  **Create Storage Symlink:**
‎    ```bash
‎    php artisan storage:link
‎    ```
‎
‎#### **4. Configure File Permissions**
‎
‎Set the correct permissions for the `storage` and `bootstrap/cache` directories to allow the web server to write to them.
‎
‎```bash
‎chmod -R 755 storage bootstrap/cache

5. Configure Document Root
The web server needs to be directed to the /public directory.
 * For a Subdomain: Change the subdomain's Document Root in cPanel's Subdomains tool to point to your /public directory (e.g., /home/username/bigwin/public).
 * For a Main Domain: The simplest method is to move all files and folders from the /public directory into your public_html directory. Then, edit the index.php file and update the paths to point to the correct locations. Alternatively, you can modify the .htaccess file.
6. Optimize for Production
To improve performance, run these commands.
php artisan config:cache
php artisan route:cache
php artisan view:cache

7. Automated Tasks (Cron Jobs)
For games with timed rounds (like Wingo), you must set up a cron job.
 * In cPanel, go to Cron Jobs.
 * Set the common settings to "Once Per Minute".
 * Use the following command, replacing USER and BigWin with your cPanel username and project folder name.
   * * * * * /usr/local/bin/php /home/USER/BigWin/artisan schedule:run >> /dev/null 2>&1

#!/bin/bash
# file: rebuild.sh
# This script recreates the entire file structure for the BigWin project's authentication module.
# Run this script in an empty directory.

# Create directory structure
mkdir -p app/Http/Controllers/Auth
mkdir -p app/Http/Middleware
mkdir -p app/Http/Requests/Auth
mkdir -p app/Models
mkdir -p app/Support
mkdir -p database/migrations
mkdir -p database/seeders
mkdir -p lang/en
mkdir -p lang/ur
mkdir -p resources/views/auth
mkdir -p resources/views/layouts
mkdir -p routes
mkdir -p tests/Feature/Auth
mkdir -p tests/Unit
# Create files with content
cat > composer.json << 'EOF'
{
    "name": "laravel/laravel",
    "description": "The Laravel Framework.",
    "keywords": ["framework", "laravel"],
    "license": "MIT",
    "type": "project",
    "require": {
        "php": "^8.2",
        "laravel/framework": "^10.0",
        "laravel/sanctum": "^3.2",
        "laravel/tinker": "^2.8"
    },
    "require-dev": {
        "fakerphp/faker": "^1.21",
        "laravel/pint": "^1.0",
        "laravel/sail": "^1.18",
        "mockery/mockery": "^1.4.4",
        "nunomaduro/collision": "^7.0",
        "phpunit/phpunit": "^10.0"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi"
        ]
    },
    "extra": {
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}
EOF

cat > .env.example << 'EOF'
APP_NAME="BigWin"
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost
APP_COUNTRY="Pakistan"
APP_CODE="+92"
APP_LOCALE=en
APP_FALLBACK_LOCALE=en
APP_DEMO_ONLY=true

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=bigwin_db
DB_USERNAME=root
DB_PASSWORD=

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MAIL_MAILER=smtp
MAIL_HOST=mailhog
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@bigwin.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_APP_CLUSTER=mt1

MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
EOF

cat > routes/web.php << 'EOF'
<?php

use App\Http\Controllers\Auth\AuthenticatedSessionController;
use App\Http\Controllers\Auth\RegisteredUserController;
use App\Http\Controllers\LocaleController;
use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider and all of them will
| be assigned to the "web" middleware group. Make something great!
|
*/

Route::get('/', function () {
    return view('welcome');
});

// Guest-only routes
Route::middleware('guest')->group(function () {
    Route::get('register', [RegisteredUserController::class, 'create'])->name('register');
    Route::post('register', [RegisteredUserController::class, 'store']);

    Route::get('login', [AuthenticatedSessionController::class, 'create'])->name('login');
    Route::post('login', [AuthenticatedSessionController::class, 'store']);
});

// Authenticated routes
Route::middleware('auth')->group(function () {
    Route::get('/dashboard', function () {
        return view('dashboard');
    })->name('dashboard');

    Route::post('logout', [AuthenticatedSessionController::class, 'destroy'])->name('logout');
});

// Language switch route
Route::get('lang/{locale}', [LocaleController::class, 'setLocale'])->name('locale.switch');
EOF

cat > routes/api.php << 'EOF'
<?php
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider and all of them will
| be assigned to the "api" middleware group. Enjoy building your API!
|
*/

Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();
});
EOF

cat > app/Models/User.php << 'EOF'
<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'phone_number',
        'password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'phone_verified_at' => 'datetime',
        'password' => 'hashed',
        'is_admin' => 'boolean',
    ];

    /**
     * Get the user's role.
     *
     * @return string
     */
    public function getRoleAttribute(): string
    {
        return $this->is_admin ? 'Admin' : 'User';
    }
}
EOF

cat > database/migrations/2024_01_01_000000_create_users_table.php << 'EOF'
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('phone_number')->unique();
            $table->string('email')->nullable();
            $table->timestamp('phone_verified_at')->nullable();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->decimal('wallet_balance', 10, 2)->default(0.00);
            $table->boolean('is_admin')->default(false);
            $table->boolean('is_operator')->default(false);
            $table->rememberToken();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};
EOF

cat > database/migrations/2024_01_01_000001_create_password_reset_tokens_table.php << 'EOF'
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('password_reset_tokens');
    }
};
EOF

cat > app/Http/Requests/Auth/RegisterRequest.php << 'EOF'
<?php

namespace App\Http\Requests\Auth;

use App\Models\User;
use Illuminate\Validation\Rules\Password;
use Illuminate\Foundation\Http\FormRequest;

class RegisterRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\Rule|array|string>
     */
    public function rules(): array
    {
        return [
            'name' => ['required', 'string', 'max:255'],
            'phone_number' => [
                'required',
                'string',
                'regex:/^\\+92\\d{10}$/',
                'unique:'.User::class,
            ],
            'email' => ['nullable', 'string', 'email', 'max:255', 'unique:'.User::class],
            'password' => ['required', 'confirmed', Password::defaults()],
        ];
    }
    
    /**
     * Get the custom validation messages.
     *
     * @return array
     */
    public function messages(): array
    {
        return [
            'phone_number.regex' => 'The phone number format is invalid. It must be in the format +92XXXXXXXXXX.',
        ];
    }
}
EOF

cat > app/Http/Requests/Auth/LoginRequest.php << 'EOF'
<?php

namespace App\Http\Requests\Auth;

use Illuminate\Support\Facades\Auth;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\ValidationException;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;

class LoginRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\Rule|array|string>
     */
    public function rules(): array
    {
        return [
            'login_id' => ['required', 'string'],
            'password' => ['required', 'string'],
        ];
    }

    /**
     * Attempt to authenticate the request's credentials.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function authenticate(): void
    {
        $this->ensureIsNotRateLimited();

        $loginId = $this->input('login_id');

        $fieldType = filter_var($loginId, FILTER_VALIDATE_EMAIL) ? 'email' : 'phone_number';

        if (! Auth::attempt([$fieldType => $loginId, 'password' => $this->input('password')], $this->boolean('remember'))) {
            RateLimiter::hit($this->throttleKey());

throw ValidationException::withMessages([
                'login_id' => __('auth.failed'),
            ]);
        }

        RateLimiter::clear($this->throttleKey());
    }

    /**
     * Ensure the login request is not rate limited.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function ensureIsNotRateLimited(): void
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }

        $seconds = RateLimiter::availableIn($this->throttleKey());

        throw ValidationException::withMessages([
            'login_id' => trans('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }

    /**
     * Get the rate limiting throttle key for the request.
     */
    public function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->input('login_id')).'|'.$this->ip());
    }
}
EOF

cat > app/Http/Controllers/Auth/RegisteredUserController.php << 'EOF'
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Providers\RouteServiceProvider;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules;
use Illuminate\View\View;
use App\Http\Requests\Auth\RegisterRequest;

class RegisteredUserController extends Controller
{
    /**
     * Display the registration view.
     */
    public function create(): View
    {
        return view('auth.register');
    }

    /**
     * Handle an incoming registration request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(RegisterRequest $request): RedirectResponse
    {
        $user = User::create([
            'name' => $request->name,
            'phone_number' => $request->phone_number,
            'email' => $request->email,
            'password' => $request->password,
        ]);

        Auth::login($user);

        return redirect()->route('dashboard');
    }
}
EOF

cat > app/Http/Controllers/Auth/AuthenticatedSessionController.php << 'EOF'
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\LoginRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;

class AuthenticatedSessionController extends Controller
{
    /**
     * Display the login view.
     */
    public function create(): View
    {
        return view('auth.login');
    }

    /**
     * Handle an incoming authentication request.
     */
    public function store(LoginRequest $request): RedirectResponse
    {
        $request->authenticate();
        $request->session()->regenerate();

        return redirect()->intended(route('dashboard'));
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): RedirectResponse
    {
        Auth::guard('web')->logout();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return redirect('/');
    }
}
EOF

cat > app/Http/Controllers/Auth/EmailVerificationNotificationController.php << 'EOF'
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;

class EmailVerificationNotificationController extends Controller
{
    /**
     * Send a new email verification notification.
     */
    public function store(Request $request): RedirectResponse
    {
        return back()->with('status', 'verification-link-sent');
    }
}
EOF

cat > app/Http/Controllers/LocaleController.php << 'EOF'
<?php

namespace App\Http\Controllers;

use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;

class LocaleController extends Controller
{
    /**
     * Set the application locale.
     */
    public function setLocale(Request $request, string $locale): RedirectResponse
    {
        if (in_array($locale, ['en', 'ur'])) {
            $request->session()->put('locale', $locale);
        }

        return redirect()->back();
    }
}
EOF

cat > app/Http/Middleware/EnsurePhoneVerified.php << 'EOF'
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class EnsurePhoneVerified
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        return $next($request);
    }
}
EOF

cat > app/Http/Kernel.php << 'EOF'
<?php

namespace App\Http;

use Illuminate\Foundation\Http\Kernel as HttpKernel;

class Kernel extends HttpKernel
{
    /**
     * The application's global HTTP middleware stack.
     *
     * These middleware are run for every request to your application.
     *
     * @var array<int, string>
     */
    protected $middleware = [
        // \App\Http\Middleware\TrustProxies::class,
        \Illuminate\Http\Middleware\PreventRequestsDuringMaintenance::class,
        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
        \App\Http\Middleware\TrimStrings::class,
        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
        // \App\Http\Middleware\SetLocale::class,
    ];

    /**
     * The application's route middleware groups.
     *
     * @var array<string, array<int, string>>
     */
    protected $middlewareGroups = [
        'web' => [
            \App\Http\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \App\Http\Middleware\VerifyCsrfToken::class,
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
            \App\Http\Middleware\SetLocale::class,
        ],

        'api' => [
            // \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
            'throttle:api',
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],
    ];

    /**
     * The application's route middleware aliases.
     *
     * These middleware may be assigned to groups or used individually.
     *
     * @var array<string, string>
     */
    protected $middlewareAliases = [
        'auth' => \Illuminate\Auth\Middleware\Authenticate::class,
        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'bindings' => \Illuminate\Routing\Middleware\SubstituteBindings::class,
        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can' => \Illuminate\Auth\Middleware\Authorize::class,
        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
        'signed' => \Illuminate\Routing\Middleware\ValidateSignature::class,
        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
        'phone.verified' => \App\Http\Middleware\EnsurePhoneVerified::class,
    ];
}
EOF

cat > app/Support/Phone.php << 'EOF'
<?php

namespace App\Support;

class Phone
{
    public static function normalize(string $number): string
    {
        $normalized = preg_replace('/[^0-9]/', '', $number);

        if (Str::startsWith($normalized, '03')) {
            $normalized = '+92' . Str::substr($normalized, 1);
        }
        elseif (Str::startsWith($normalized, '923')) {
            $normalized = '+' . $normalized;
        }

        return $normalized;
    }
}
EOF

cat > database/seeders/AdminUserSeeder.php << 'EOF'
<?php

namespace Database\Seeders;

use App\Models\User;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

class AdminUserSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $password = Str::random(12);

        User::firstOrCreate(
            ['phone_number' => '+923001234567'],
            [
                'name' => 'Admin BigWin',
                'email' => 'admin@bigwin.com',
                'password' => Hash::make($password),
                'is_admin' => true,
                'is_operator' => true,
                'email_verified_at' => now(),
                'phone_verified_at' => now(),
            ]
        );

        $this->command->info('Admin user created successfully!');
        $this->command->warn("Use the following credentials to log in:");

$this->command->line("Phone: +923001234567");
        $this->command->line("Password: {$password}");
        $this->command->warn("Please change this password immediately after first login.");
    }
}
EOF

cat > lang/en/auth.php << 'EOF'
<?php

return [
    'failed' => 'These credentials do not match our records.',
    'password' => 'The provided password is incorrect.',
    'throttle' => 'Too many login attempts. Please try again in :seconds seconds.',
    'register' => 'Register',
    'login' => 'Login',
    'logout' => 'Logout',
    'name' => 'Name',
    'phone_number' => 'Phone Number',
    'email' => 'Email Address (Optional)',
    'password' => 'Password',
    'confirm_password' => 'Confirm Password',
    'remember_me' => 'Remember me',
    'already_registered' => 'Already registered?',
    'dont_have_account' => 'Don\'t have an account?',
    'welcome' => 'Welcome to BigWin!',
];
EOF

cat > lang/ur/auth.php << 'EOF'
<?php

return [
    'failed' => 'یہ اسناد ہمارے ریکارڈ سے مماثل نہیں ہیں۔',
    'password' => 'فراہم کردہ پاس ورڈ غلط ہے۔',
    'throttle' => 'بہت زیادہ لاگ ان کی کوششیں ہیں۔ براہ کرم :seconds سیکنڈز میں دوبارہ کوشش کریں۔',
    'register' => 'رجسٹر کریں',
    'login' => 'لاگ ان کریں',
    'logout' => 'لاگ آؤٹ',
    'name' => 'نام',
    'phone_number' => 'فون نمبر',
    'email' => 'ای میل ایڈریس (اختیاری)',
    'password' => 'پاس ورڈ',
    'confirm_password' => 'پاس ورڈ کی تصدیق کریں',
    'remember_me' => 'مجھے یاد رکھیں',
    'already_registered' => 'پہلے سے رجسٹرڈ ہیں؟',
    'dont_have_account' => 'اکاؤنٹ نہیں ہے؟',
    'welcome' => 'بگ ون میں خوش آمدید!',
];
EOF

cat > lang/en/validation.php << 'EOF'
<?php

return [
    'regex' => 'The :attribute format is invalid.',
    'unique' => 'The :attribute has already been taken.',
    'required' => 'The :attribute field is required.',
    'email' => 'The :attribute must be a valid email address.',
    'confirmed' => 'The :attribute confirmation does not match.',
    'min' => [
        'string' => 'The :attribute must be at least :min characters.',
    ],
    'attributes' => [
        'phone_number' => 'phone number',
    ],
];
EOF

cat > lang/ur/validation.php << 'EOF'
<?php

return [
    'regex' => 'فارمیٹ غلط ہے۔ :attribute',
    'unique' => ':attribute پہلے ہی لیا جا چکا ہے۔',
    'required' => ':attribute کا خانہ ضروری ہے۔',
    'email' => ':attribute درست ای میل ایڈریس ہونا چاہیے۔',
    'confirmed' => ':attribute کی تصدیق مماثل نہیں ہے۔',
    'min' => [
        'string' => ':attribute کم از کم :min حروف کا ہونا چاہیے۔',
    ],
    'attributes' => [
        'phone_number' => 'فون نمبر',
    ],
];
EOF

cat > resources/views/layouts/app.blade.php << 'EOF'
<!DOCTYPE html>
<html lang="{{ app()->getLocale() }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{{ config('app.name', 'BigWin') }}</title>
    <link href="[https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css](https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css)" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .container {
            max-width: 500px;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <a class="navbar-brand" href="{{ url('/') }}">{{ config('app.name', 'BigWin') }}</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    @auth
                        <li class="nav-item">
                            <a class="nav-link" href="{{ route('dashboard') }}">Dashboard</a>
                        </li>
                    @else
                        <li class="nav-item">
                            <a class="nav-link" href="{{ route('login') }}">@lang('auth.login')</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{{ route('register') }}">@lang('auth.register')</a>
                        </li>
                    @endauth
                </ul>
                <div class="d-flex">
                    <a class="btn btn-sm btn-outline-primary me-2" href="{{ route('locale.switch', 'en') }}">EN</a>
                    <a class="btn btn-sm btn-outline-primary" href="{{ route('locale.switch', 'ur') }}">UR</a>
                    @auth
                        <form method="POST" action="{{ route('logout') }}" class="ms-3">
                            @csrf
                            <button type="submit" class="btn btn-sm btn-danger">@lang('auth.logout')</button>
                        </form>
                    @endauth
                </div>
            </div>
        </div>
    </nav>


    <main class="py-4">
        <div class="container">
            @if(session('status'))
                <div class="alert alert-success" role="alert">
                    {{ session('status') }}
                </div>
            @endif
            @yield('content')
        </div>
    </main>
    <script src="[https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js](https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js)"></script>
</body>
</html>
EOF

cat > resources/views/auth/register.blade.php << 'EOF'
@extends('layouts.app')

@section('content')
<div class="card p-4">
    <h2 class="text-center mb-4">@lang('auth.register')</h2>
    <form method="POST" action="{{ route('register') }}">
        @csrf

        <div class="mb-3">
            <label for="name" class="form-label">@lang('auth.name')</label>
            <input type="text" class="form-control" id="name" name="name" value="{{ old('name') }}" required autofocus>
            @error('name')
                <div class="text-danger mt-1">{{ $message }}</div>
            @enderror
        </div>

        <div class="mb-3">
            <label for="phone_number" class="form-label">@lang('auth.phone_number')</label>
            <input type="tel" class="form-control" id="phone_number" name="phone_number" value="{{ old('phone_number') }}" placeholder="+92XXXXXXXXXX" required>
            @error('phone_number')
                <div class="text-danger mt-1">{{ $message }}</div>
            @enderror
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">@lang('auth.email')</label>
            <input type="email" class="form-control" id="email" name="email" value="{{ old('email') }}">
            @error('email')
                <div class="text-danger mt-1">{{ $message }}</div>
            @enderror
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">@lang('auth.password')</label>
            <input type="password" class="form-control" id="password" name="password" required autocomplete="new-password">
            @error('password')
                <div class="text-danger mt-1">{{ $message }}</div>
            @enderror
        </div>

        <div class="mb-3">
            <label for="password_confirmation" class="form-label">@lang('auth.confirm_password')</label>
            <input type="password" class="form-control" id="password_confirmation" name="password_confirmation" required>
        </div>

        <div class="d-grid gap-2">
            <button type="submit" class="btn btn-primary">
                @lang('auth.register')
            </button>
        </div>

        <div class="text-center mt-3">
            <a href="{{ route('login') }}">@lang('auth.already_registered')</a>
        </div>
    </form>
</div>
@endsection
EOF

cat > resources/views/auth/login.blade.php << 'EOF'
@extends('layouts.app')

@section('content')
<div class="card p-4">
    <h2 class="text-center mb-4">@lang('auth.login')</h2>
    <form method="POST" action="{{ route('login') }}">
        @csrf

        <div class="mb-3">
            <label for="login_id" class="form-label">@lang('auth.phone_number') / Email</label>
            <input type="text" class="form-control" id="login_id" name="login_id" value="{{ old('login_id') }}" required autofocus>
            @error('login_id')
                <div class="text-danger mt-1">{{ $message }}</div>
            @enderror
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">@lang('auth.password')</label>
            <input type="password" class="form-control" id="password" name="password" required autocomplete="current-password">
            @error('password')
                <div class="text-danger mt-1">{{ $message }}</div>
            @enderror
        </div>

        <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="remember" name="remember">
            <label class="form-check-label" for="remember">@lang('auth.remember_me')</label>
        </div>

        <div class="d-grid gap-2">
            <button type="submit" class="btn btn-primary">
                @lang('auth.login')
            </button>
        </div>
        
        <div class="text-center mt-3">
            <a href="{{ route('register') }}">@lang('auth.dont_have_account')</a>
        </div>
    </form>
</div>
@endsection
EOF

cat > resources/views/dashboard.blade.php << 'EOF'
@extends('layouts.app')

@section('content')
<div class="card p-4">
    <h2 class="text-center mb-4">@lang('auth.welcome')</h2>
    <p class="text-center">
        Hello, <strong>{{ Auth::user()->name }}</strong>!
    </p>
    <div class="alert alert-info text-center" role="alert">
        This is a placeholder for your dashboard.
        <br>
        In the next phases, this will include your wallet balance, recent plays, and more.
    </div>
</div>
@endsection
EOF

cat > phpunit.xml << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="[http://www.w3.org/2001/XMLSchema-instance](http://www.w3.org/2001/XMLSchema-instance)"
         xsi:noNamespaceSchemaLocation="[https://schema.phpunit.de/10.0/phpunit.xsd](https://schema.phpunit.de/10.0/phpunit.xsd)"
         bootstrap="vendor/autoload.php"
         colors="true"
         cacheDirectory=".phpunit.cache">
    <testsuites>
        <testsuite name="Feature">
            <directory>./tests/Feature</directory>
        </testsuite>
        <testsuite name="Unit">
            <directory>./tests/Unit</directory>
        </testsuite>
    </testsuites>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="DB_CONNECTION" value="sqlite"/>
        <env name="DB_DATABASE" value=":memory:"/>
        <env name="BCRYPT_ROUNDS" value="4"/>
        <env name="MAIL_MAILER" value="array"/>
        <env name="QUEUE_CONNECTION" value="sync"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="APP_KEY" value="base64:3h1L2W5jM4o7fE9xR0iN8yN6qT3bV2oJ4eP7wS1cQ0k="/>
    </php>
</phpunit>
EOF

cat > tests/Feature/Auth/RegisterTest.php << 'EOF'
<?php

namespace Tests\Feature\Auth;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;
use App\Models\User;

class RegisterTest extends TestCase
{
    use RefreshDatabase;

    /**
     * Test that the registration page can be rendered.
     */
    public function test_registration_page_can_be_rendered(): void
    {
        $response = $this->get('/register');
        $response->assertStatus(200);
    }

    /**
     * Test that a new user can register with a valid phone number.
     */
    public function test_new_user_can_register_with_valid_phone_number(): void
    {
        $response = $this->post('/register', [
            'name' => 'Test User',
            'phone_number' => '+923001234567',
            'email' => 'testuser@example.com',
            'password' => 'password',
            'password_confirmation' => 'password',
        ]);

        $this->assertAuthenticated();
        $response->assertRedirect(route('dashboard'));
        $this->assertDatabaseHas('users', ['phone_number' => '+923001234567']);
    }

    /**
     * Test that a user cannot register with an invalid phone number format.
     */
    public function test_user_cannot_register_with_invalid_phone_number_format(): void
    {
        $response = $this->post('/register', [
            'name' => 'Test User',
            'phone_number' => '03001234567',
            'email' => 'invalidphone@example.com',
            'password' => 'password',
            'password_confirmation' => 'password',
        ]);

        $this->assertGuest();
        $response->assertSessionHasErrors('phone_number');
    }

    /**
     * Test that a user cannot register with a duplicate phone number.
     */
    public function test_user_cannot_register_with_duplicate_phone_number(): void
    {
        User::factory()->create(['phone_number' => '+923001234567']);

        $response = $this->post('/register', [
            'name' => 'Duplicate User',
            'phone_number' => '+923001234567',
            'email' => 'duplicate@example.com',
            'password' => 'password',
            'password_confirmation' => 'password',
        ]);

        $this->assertGuest();
        $response->assertSessionHasErrors('phone_number');
    }
}
EOF

cat > tests/Feature/Auth/LoginTest.php << 'EOF'
<?php

namespace Tests\Feature\Auth;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;
use App\Models\User;

class LoginTest extends TestCase
{
    use RefreshDatabase;

    /**
     * Test that the login page can be rendered.
     */
    public function test_login_page_can_be_rendered(): void
    {
        $response = $this->get('/login');
        $response->assertStatus(200);
    }

    /**
     * Test that a user can login with a phone number and a valid password.
     */
    public function test_user_can_authenticate_with_phone_number(): void
    {
        $user = User::factory()->create(['phone_number' => '+923001234567', 'password' => bcrypt('password')]);

        $response = $this->post('/login', [
            'login_id' => '+923001234567',
            'password' => 'password',
        ]);

        $this->assertAuthenticatedAs($user);
        $response->assertRedirect(route('dashboard'));
    }

    /**
     * Test that a user can login with an email and a valid password.
     */
    public function test_user_can_authenticate_with_email(): void
    {
        $user = User::factory()->create(['email' => 'test@example.com', 'password' => bcrypt('password')]);

        $response = $this->post('/login', [
            'login_id' => 'test@example.com',
            'password' => 'password',
        ]);

        $this->assertAuthenticatedAs($user);
        $response->assertRedirect(route('dashboard'));
    }

    /**
     * Test that a user cannot log in with invalid credentials.
     */
    public function test_user_cannot_authenticate_with_invalid_password(): void
    {
        $user = User::factory()->create(['phone_number' => '+923001234567', 'password' => bcrypt('password')]);

        $this->post('/login', [
            'login_id' => '+923001234567',
            'password' => 'wrong-password',
        ]);

        $this->assertGuest();
    }
}
EOF

cat > tests/Feature/Auth/LocaleSwitchTest.php << 'EOF'
<?php

namespace Tests\Feature\Auth;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class LocaleSwitchTest extends TestCase
{
    use RefreshDatabase;

    /**
     * Test that the locale can be switched to Urdu.
     */
    public function test_locale_can_be_switched_to_urdu(): void
    {
        $response = $this->get(route('locale.switch', 'ur'));
        $response->assertSessionHas('locale', 'ur');
        $response->assertRedirect();
    }

    /**
     * Test that the locale can be switched to English.
     */
    public function test_locale_can_be_switched_to_english(): void
    {
        $response = $this->get(route('locale.switch', 'en'));
        $response->assertSessionHas('locale', 'en');
        $response->assertRedirect();
    }

    /**
     * Test that an invalid locale is not set.
     */
    public function test_invalid_locale_is_not_set(): void
    {
        $response = $this->get(route('locale.switch', 'fr'));
        $response->assertSessionMissing('locale');
        $response->assertRedirect();
    }
}
EOF

cat > public/.htaccess << 'EOF'
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Redirect to the public directory
    RewriteRule ^(.*)$ public/$1 [L]
</IfModule>
EOF
